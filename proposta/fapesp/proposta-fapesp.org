#+Title: Programação Linear Inteira e Combinatória Poliédrica do Problema de Coloração em Grafos
#+Author: Ieremies Vieira da Fonseca Romero
#+options: toc:nil date:nil
#+latex_header: \usepackage{setspace}
#+latex_header: \doublespacing

# Documento inteiro: 20 páginas
# Resumo: máximo de 20 linhas
#+begin_abstract
Histórico / importância do problema.
Usar PLI, em especial branch-and-price (geração de colunas) e branch-and-cut (planos de corte), no problema de coloração de grafos.
Objetivamos novas formulações, cortes e estratégias para melhor resolver as instâncias consolidadas da literatura.
#+end_abstract

* Introdução
# Contexto histórico -> aqui entram referência de como foi proposto e resultados importantes de grafos.
Dado um grafo não direcionado, o *problema de coloração de vértices* (do inglês, VCP) requer que designemos uma cor a cada vértice sem que este possua vizinhos de mesma cor e utilizemos o menor número possível de cores.
Sua NP-completude foi demonstrada por [cite/text:@Garey1979ComputersIntractabilityGuide].

# Aplicações práticas.
Como discutido por [cite:@Malaguti2010SurveyVertexColoring], diversas são as aplicações do problema, como: agendamento [cite:@Leighton1979GraphColoringAlgorithm], timetabling [cite:@Werra1985introductiontimetabling], alocação de resgistradores [cite:@Chow1990prioritybasedcoloring], comunicação de redes [cite:@Caprara2007PassengerRailwayOptimization] e alocação de banda [cite:@Gamst1986Somelowerbounds].

# Importância de resolver o problema de forma eficaz e rápida.
As aplicações acima deixam claro que encontrar uma boa (ou até ótima solução) para o problema é crucial. Cenários reais muitas vezes lidam com centenas de milhares de vértices, tornando necessário também resolvermos em tempo hábil. [[comment:isso ficou horrível]]

** Modelo matemático
[[comment::inline conceitos que são citados mais para frente (eu vou voltar aqui para escrever)]]
** Revisão bibliográfica
[[comment::inline eu não sei o que colocar aqui (ou se precisa existir essa parte) Todos os trabalhos que coloquei estão citado em outras partes do texto]]
** Problemas similares
[cite/text:@Cornaz2008oneonecorrespondence; @Cornaz2017SolvingVertexColoring] usam técnicas de outros problemas para resolver o VCP.
*** Bandwidth Coloring Problem
O problema de *Multicoloração de Banda* (BMCP) é a combinação de dois problemas: Coloração de Banda e Multicoloração.
No problema de *Coloração de Banda*, a diferença entre a cor de cada par de vértices adjacentes deve ser, ao menos, a distância entre os dois vértices. Assim, quando a disância é igual a $1$, este problema é exatamente o VCP.
No problema de *Multicoloração* um valor $w_i$ é designado a cada vértice e $w_i$ cores devem ser alocadas a este, de forma que um par qualquer de vértices adjacentes não compartilhe nenhum cor em comum.

Assim, no BMCP, é necessário atribuir, para um vértice $i$, $w_i$ cores e para qualquer par de vértices adjacentes, cada combinação dois a dois de cores atribuidas a eles deve ter diferença maior que a distância entre os vértices.
[[comment:Coloco a formulção de atribuição? Acho que não já que o objetivo é apenas mostrar que existem problemas similares]]

Este problema permite que situações mais complexas que o VCP sejam modeladas, como o problema de alocação de frequência em telecomunicações [cite:@Aardal2007Modelssolutiontechniques].
# Depois o artigo fala sobre alguns resultados e desenvolvimentos específicos desse problema, mas acho que não cabe colocar aqui.

*** Bounded VCP
Muitas vezes, o recurso que queremos alocar é limitado. Assim, podemos colocar um peso $w_i$ em cada vértice e limitar a soma dos pesos dos vértices alocados a cada uma das cores, uma restrição de capacidade.
Este problema é conhecido como VCP Limitado ou Problema de Empacotamento com Conflito [cite/text:@Connolly1991KnapsackProblemsAlgorithms].
# Conferir se essa referência acima está correta.

Seja $C$ a capacidade de cada cor, a restrição de capacidade é dada por
\[ \sum_{i=1}^n w_i x_{ih} \leq C, \quad h = 1, \dots, n\]
e pode ser adicionada à formulação de ASS para modelar o problema de BVCP.
[[comment:Isso tá antes da formulação]]
*** TODO WVCP
*** Problemas similares
[[comment::inline esse foi um que esbarrei. Eu vou atrás de outros como b-coloring, equitable coloring, rainbow coloring?]]
**** TODO MSCP
O problema de Coloração de Soma Mínima nossa função objetivo é soma dos inteiros (cores) alocados a cada vértice.
# [[pdf:~/arq/files/Ternier2017ExactAlgorithmsVertex - Exact Algorithms for the Vertex Coloring Problem and Its Generalisations.pdf::80][ref]]
* Metodologia
** Programação Linear
*Programação Linear* é uma técnica de otimização de problemas a partir da modelagem dos mesmos em *programas lineares*.
Nestes, definimos uma função objetivo, a qual queremos maximizar ou minimizar com suas variáveis sujeitas a um conjunto de restrições lineares (equações ou inequações lineares) [cite/text:@Chvatal1983LinearProgramming] . Um programa linear pode ser escrito da seguinte forma:
\begin{alignat*}{4}
& \omit\rlap{minize \quad \quad $\displaystyle cx$} \\
& \mbox{sujeito a}&& \quad & Ax & \geq b  & \quad &  \\
&                 &&       & x               & \in \mathbb{R}_+ &      &
\end{alignat*}

Para encontrar soluções viáveis com valores ótimos, conhecemos o algoritmo *simplex* que, apesar de ter complexidade exponencial, no caso médio executa em tempo polinomial.

** Programação linear inteira
Para alguns problemas, como o de coloração de grafos, não faz sentido falar em soluções fracionárias, afinal, não conseguimos designar "meia cor" a um vértice.
Para isso, restringimos as variáveis aos inteiros, fazendo assim um *Programa Linear Inteiro*. Caso apenas um subconjunto das variáveis possuam a restrição de integralidade, chamamos esse programa de linear misto.

O que a princípio pode parecer uma pequena alteração, torna o problema computacionalmente muito mais complexo.
Para encontramos boas soluções viáveis para esse tipo de programa, algoritmos como o simplex não são o suficiente.
Para isso, utilizamos técnicas como *branch-and-bound*, que consiste em dividir o problema em subproblemas menores e, durante o processo, encontrar limitantes que permitam diminuir o espaço de busca.

** Formulação clássica (atribuição)
Sabemos que $n$ cores são suficientes para colorir um grafo $G$. Assim, podemos definir dois conjuntos de variáveis binárias: $x_{ih}$ se o vértice $i$ é colorido com a cor $h$ e $y_h$ se a cor $h$ é utilizada. Dessa forma, definimos a seguinte formulação.
\begin{alignat*}{4}
\mathrm{(ASS)} \quad & \omit\rlap{minimize  $\displaystyle \sum_{i=1}^n y_h$} \\
& \mbox{sujeito a}&& \quad & \sum_{h=1}^n x_{ih}&= 1        & \quad & i \in V \\
&                 &&   & x_{ih} + x_{jh}    & \leq y_h &   & (i,j) \in E, h=1,\dots,n \\
&                 &&   & x_{ih}    & \in \{0,1\} &   & (i,j) \in E, h=1,\dots,n\\
&                 &&   & y_i       & \in \{0,1\} &   & i \in V
\end{alignat*}
Apesar de sua claridade e simplicidade, tal formulação vê pouca aplicação prática sem que apliquemos técnicas mais sofisticadas.

Esse fato se dá por dois motivos:
- Muitas soluções são simétricas umas às outras, já que as cores são indistiguíveis. Uma solução que utiliza $k$ cores possui $k$ permutações de cores do que é, efetivamente, a mesma solução.
- A relaxação linear do modelo é extremamente fraca.

[cite/text:@MendezDiaz2006BranchCutAlgorithm; @MendezDiaz2008CuttingPlaneAlgorithm] se dedicaram a resolver tais problemas.
[cite/text:@MendezDiaz2006BranchCutAlgorithm] adicionaram a restrição
\[ y_h \geq y_h+1 \quad h = 1, \dots, n-1 \]
que garante que a cor $h+1$ só será utilizada se a cor $h$ já estiver sendo.

Eles também acrescentaram diversas famílias de inequaldiades válidas ao politopo do novo modelo que são adicionadas ao algoritmo de /Branch-and-Cut/ [[comment:definir]] para fortalecer a relaxação linear além de implementar a estratégia de branching proposta por [cite/text:@Brelaz1979Newmethodscolor] com resultados computacionais satisfatórios.
[[comment::inline eu preciso mostrar as inqualidades?]]
# Isso tá estranho, esse é realmente o mais moderno de branch-and-cut que temos? ...

Já [cite/text:@MendezDiaz2008CuttingPlaneAlgorithm] apresentam mais duas variações da formulação ASS: uma onde a quantidade de vértices cuja cor $h+1$ é atribuida não pode ser maior que a quantidade atribuida a cor $h$ e outro onde conjuntos independentes são ordenados pelo menor indice e apenas a cor $h$ pode ser atribuída ao $h-\text{ésimo}$ conjunto.

** TODO Formulação com representantes (campelo)
[cite/text:@Campelo2004CliquesHolesVertex] propõe uma formulação de representantes também utilizando essa idea de representantes para remover simetrias e [cite/text:@Campelo2008AsymmetricRepresentativesFormulation] incrementa nessa idea, avançando ainda mais o estudo poliédrico da formulação.
** TODO Formulação de cobertura de conjuntos (branch-and-price)
Proposto por [cite/text:@Mehrotra1996ColumnGenerationApproach], outra forma de entender o problema é imaginá-lo como um problema de cobertura de conjuntos onde os conjuntos disponíveis são os conjuntos independentes dos vértices.[[comment: conjunto conjunto conjunto]]

Assim, seja $S$ a família de conjuntos impendentes do grafo $G$, a variável binária $x_s$ é representa se o conjunto $s \in S$ está sendo usado ou não na solução. Nossa formulação então se dá por:
\begin{alignat*}{4}
& \omit\rlap{minimize  $\displaystyle \sum_{s \in S} x_s$} \\
& \mbox{sujeito a}&& \quad & \sum_{s \in S: i \in s} x_{s}&\geq 1 & \quad & i \in V \label{rest9} \\
&                 &&   & y_s       & \in \{0,1\} &    & s \in S
\end{alignat*}
[[comment::inline Explicação das restrições?]]
Já essa formulação sofre de ter um número exponencial de variáveis.

[cite/text:@Mehrotra1996ColumnGenerationApproach] propôs um algoritmo de /branch-and-price/ [[comment:definir]] baseado na formulação de cobertura de conjuntos.
O subproblema de geração de coluna caracteriza um *Problema de Conjunto Independente de peso máximo*.
# TODO Tá certo esse nome do problema?
\begin{alignat*}{4}
& \omit\rlap{maximize  $\displaystyle \sum_{i \in V} \pi_i z_i$} \\
& \mbox{sujeito a}&& \quad & z_i + z_j &\leq 1 & \quad & (i,j) \in E \\
&                 &&   & z_i       & \in \{0,1\} &    & i \in V
\end{alignat*}
onde $z_i$ é uma variável binária que indica se o vértice $i$ está incluso no conjunto independente e $\pi_i$ é o valor ótimo da variável dual associado a restrição \ref{rest9}.
Tal problema pode ser resolvido de forma heurística para encontrar a coluna de custo reduzido com valor negativo.[[comment:preciso explica o porquê disso?]]
Em caso de soluções frácionárias, os autores sugerem uma estratégia [[comment:explico qual?]] que garante que os subproblemas continuam a ser de coloração de vértices e apenas requer que o grafo original seja alterado.

[[comment:inline ainda preciso olhar esses dois papers]]
- [cite/text:@Malaguti2011ExactApproachVertex] propôs metaheurísitcas para inicialização e geração de colunas bem como novos esquemas de branching.
- [cite/text:@Held2012Maximumweightstable] sugere técnicas para melhorar a estabilidade numérica

[cite/text:@Hansen2009Setcoveringpacking] propôs a formulação chamada de *Empacotamento de conjunto*.
\begin{alignat*}{4}
& \omit\rlap{minimize  $\displaystyle \sum_{s \in \Omega} (|s| - 1)x_s$} \\
& \mbox{sujeito a}&& \quad & \sum_{s \in \Omega: i \in s} x_{s}&\leq 1 & \quad & i \in V \\
&                 &&   & y_s       & \in \{0,1\} &    & s \in \Omega
\end{alignat*}
na qual $\Omega$ é a família de conjuntos independentes com mais de um elemento.
Para essa formulação, seja $z$ o valor da solução, a quantidade de cores usadas é igual $k = n - z$.
Aleḿ disso, [cite/text:@Hansen2009Setcoveringpacking] demonstram a equivalência das formulações de SC e SP, bem como apresentam diversas famílias de inequalidades válidas que definem facetas[[comment:definir]].

#+begin_prep
[cite/text:@Hansen2009Setcoveringpacking] Seja $i \in V$, então a inequação correspondente /ref{rest9} define uma faceta se, e somente se, $i$ não for dominado.
#+end_prep
[[comment:definir dominado]]

Os autores também apresentam resultados computacionais que não demonstram superioridade entre o trabalho deles em relação à [cite/text:@Mehrotra1996ColumnGenerationApproach].
Por fim, duas técnicas de pré-processamento e um algoritmo de plano de corte [[comment:definir]].

# DUVIDA no parágrafo logo a baixo da preposição, (0,1/2)-chvátal-gumory cortes.
** TODO Branch and bound usando DSATUR
Introduzido por [cite/text:@Brelaz1979Newmethodscolor], melhorado por [cite/text:@Sewell1996improvedalgorithmexact] e [cite/text:@Segundo2012newDSATURbased] e aplicado por [cite/text:@MendezDiaz2015DSATURbasedalgorithm] em variantes do VCP.

# [[pdf:~/arq/files/Ternier2017ExactAlgorithmsVertex - Exact Algorithms for the Vertex Coloring Problem and Its Generalisations.pdf::42]]

[cite/text:@Brelaz1979Newmethodscolor] propôs o algoritmo guloso chamado de DSATUR, em que, a cada iteração, colorimos um vértice $v$ como uma cor válida [[comment:definir]].
Dizemos que o *grau de saturação* [[comment:cromatico ou de saturação]] de um vértice $v$ numa coloração parcial [[comment:definir]] é a quantidade de cores distintas na sua vizinhança aberta [[comment:definir]].
O DSATUR utiliza essa ideia para escolher, como próximo vértice a ser colorido, aquele com maior grau de saturação.

É possível utilizar essa ideia para melhorar nosso /branch-and-bound/.
A cada ramificação, selecionamos o vértice com maior gráu de saturação e criamos um problema para cada cor viável já utilizada, acrescentando uma ainda não utilizada.
[[comment::inline talvez eu precise definir as notações de coloração parcial para isso ficar melhor]]

Apesar disso, muitas vezes, diversos vértices possuem o mesmo gráu de saturação, fazendo-se necessário implementar regras de desempate.
Dentre as propostas, temos:
- [cite/text:@Brelaz1979Newmethodscolor] utiliza o gráu do vértice.
- [cite/text:@Sewell1996improvedalgorithmexact] utiliza o vértice que maximiza o número de cores disponíveis para todos os vértices ainda não coloridos.
- [cite/text:@Segundo2012newDSATURbased] incrementa na ideia anterior, mas apenas utilizando os vértices que estão sendo desempatados.
Em todos os casos acima, se mantiver algum empate, a ordenação lexigráfica é utilizada.

[cite/text:@Ternier2017ExactAlgorithmsVertex] implementa essas variações mostra que o proposto por [cite/text:@Sewell1996improvedalgorithmexact] é o mais rápido, mesmo com maior complexidade computacional na regra de desempate, dado um bom limitante inferior inicial.

[cite/text:@Ternier2017ExactAlgorithmsVertex] apresenta novas variações para o algoritmo de /branch-and-bound/ usando DSATUR e novas regras de escolha de vértices com bons resultados em relação ao estado-da-arte.
# NO FINAL DISSO TUDO EU LEIO QUE ELE PUBLICOU ISSO EM OUTRAS REFERÊNCIA ÒDIOOOOOOOOOOOOO
# [[pdf:~/arq/files/Ternier2017ExactAlgorithmsVertex - Exact Algorithms for the Vertex Coloring Problem and Its Generalisations.pdf::79][ref]]
** TODO Ordenação parcial
[[comment::inline ainda preciso estudar isso aqui]]
[cite/text:@Jabrayilov2018NewIntegerLinear; @Jabrayilov2022StrengthenedPartialOrdering].
** Estado da arte
[cite/text:@Jabrayilov2018NewIntegerLinear] implementam as abordagens acima e mostra não haver uma dominancia clara entre nenhuma delas.
Apesar disso, nos seus testes, ordenação parcial se sai melhor em grafos esparços enquanto a formulação de representantes se sai melhor em grafos densos.
* Objetivos
Neste projeto, objetivamos propor novos modelos de PLI para dominação romana e suas variantes explorando técnicas como /branch-and-cut/ e /branch-and-price/.
Além disso, estudaremos a possibilidade de novos cortes e limitantes para as formulações.

[[comment::inline aqui a minha ideia é apresentar esse tal de ferramental moderno e as ideias mais recentes que podemos aplicar]]
[cite:@Lima2022Exactsolutionnetwork]
[cite:@Pessoa2021SolvingBinPacking]

# TODO Trabalhos com branch-cut-and-price
# citar a ideia do "ferramental moderno de PLI"
# Reforçar que a ideia é colocar o novo ferramental de binpacking em PLI (que o Renan estava usando)
# Além disso, podemos atacar alguns problemas similares durante o percurso.
* Cronograma
BEPE indicar umas possibilidades de nomes. Manuel Iori.

* Material e método
Para o desenvolvimento do projeto, o aluno utilizará-se de artigos e materiais de consulta disponibilizados pela UNICAMP de maneira gratuita, grande parte desses de forma online ou por meio da Biblioteca do Instituto de Matemática, Estatística e Computação Científica.

Ademais, serão realizados encontros semanais entre o aluno e o orientador para debater os conteúdos estudados e acompanhar o progresso do projeto.

* Avaliação dos resultados
Os algoritmos e modelos propostos serão comparados com as instâncias presentes na literatura, como as [cite/text:@GraphColoringInstances] e, caso necessário, novas instâncias poderão ser geradas.

Os resultados dos experimentos computacionais serão comparados utilizando técnicas como *Performance Profile* demonstrado por [cite/t:@Dolan2002Benchmarkingoptimizationsoftware].

RELATÓRIOS

#+PRINT_BIBLIOGRAPHY:
