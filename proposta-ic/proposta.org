#+Title: Problema de Dominação Romana
#+author: Ieremies Vieira da Fonseca Romero
#+options: toc:nil date:nil
#+latex_header: \usepackage[a4paper, total={6in, 8in}]{geometry}
#+latex_header: \usepackage{multicol}

# Mostrar que eu tenho um objetivo claro do que quero fazer
# Que eu tenho cultura, que eu sei do que eu to falando
# Motivação do pq estudar

# PROF dá para encurtar

#+begin_abstract
A Dominação Romana é um problema proposto por [cite/text:@Stewart1999DefendRomanEmpire] em que desejamos defender o império romano dispondo de um certo número de legiões.
Para isso, cada cidade deve ser protegida de forma que esta possua uma legião ou que uma vizinha dela possua duas legiões.
Assim, deseja-se minimizar a quantidade de legiões distribuídas sem abdicar da segurança do império.

Neste projeto, utilizaremos Programação Linear Inteira (PLI) para modelar o problema.
Objetivamos propor novos modelos de PLI para dominação romana e suas variantes, explorando técnicas como /branch-cut/, /branch-price/ e ferramental moderno de PLI.
#+end_abstract

* Introdução
Durante a Segunda Guerra Mundial, General Douglas MacArthur propôs uma estratégia de movimentação que consistia em avançar suas tropas de uma ilha para outra apenas quando ele poderia deixar para trás um número suficiente de tropas ([cite:@Stewart1999DefendRomanEmpire]).
Ele não foi o primeiro a utilizar dessa estratégia: segundo [cite/t:@Stewart1999DefendRomanEmpire], referências históricas apontam que o Imperador Constantino, no quarto século A.C., aplicou estratégia similar para defender o Império Romano de invasões dos povos ditos "bárbaros".

Para exemplificar o seu uso, considere o mapa do Império Romano simplificado na Figura [[fig:mapa]].
Nesse exemplo, o imperador possui $4$ legiões para serem distribuídas pelo território e ele deseja fazê-lo de forma que todas as cidades sejam consideradas seguras.
Uma região é dita segura, ou coberta, se há uma legião em seu território ou se está conectada a outra região com duas legiões.

#+name: fig:mapa
#+caption: Representação do mapa do Império Romano usada como ilustração do problem, inspirada em [cite/t:@Stewart1999DefendRomanEmpire].
#+attr_latex: :scale 0.3
[[./mapa.jpg]]

# Motivação mais atual
As aplicações vão além do universo militar: ao alocar estações de serviços de emergência, uma lógica similar à "segurança", acima descrita, é muito útil [cite:@GhaffariHadigheh2019Romandominationproblem].
Além disso, redes sem fio "ad hoc", onde um conjunto de usuários com conexões sem fio formam uma rede temporária, sem necessidade de autoridade central ou infraestrutura permanente, constituem outro bom exemplo [cite:@Wu2000Dominationitsapplications].


** Modelo matemático
Para um grafo $G = (V, E)$, dizemos que a *vizinhança aberta* $N(v)$ de um vértice $v$ é definida como o conjunto de vértices adjacentes a $v$ em $G$, ou seja, $N(v) = \{u : (u, v) \in E\}$.
Similarmente, dizemos que a *vizinhança fechada* $N[v]$ de um vértice $v$ é a vizinhança aberta incluindo o próprio $v$, ou seja, $N[v] = N(v) \cup \{v\}$.
Para um conjunto de vértices $s$, a vizinhança aberta desse conjunto é a união das vizinhanças abertas de cada um dos seus vértices (o respectivo pode ser dito para a vizinhança fechada).
Um *conjunto dominante* de um grafo $G$ é um subconjunto de vértices $D$ tal que a vizinhança fechada de $D$ é o próprio conjunto $V$.
Por sua vez, o *número de dominação* de um grafo $G$, dito $\gamma(G)$, é a cardinalidade do menor conjunto dominante do grafo $G$.

O problema de dominação romana é definido em um grafo $G = (V, E)$ simples, finito e não-direcionado, no qual cada vértice representa uma cidade ou região do império e as arestas são as conexões entre elas [cite:@Cockayne2004Romandominationgraphs].
Dizemos que uma *função de dominação romana* é uma função $f : V \to \{0, 1, 2\}$ na qual $f(v)$ indica a quantidade de legiões naquela região, de forma que, para qualquer $v$ tal que $f(v) = 0$, deve existir $u$ vizinho a $v$ cujo $f(u) = 2$.
Definimos o *número de dominação romana* de um grafo $G$ como o menor valor $f(v), \forall v \in V$, tal que $f$ é uma função de dominação romana do grafo $G$.

** Revisão bibliográfica
Após a descrição inicial do problema, [cite/t:@ReVelle2000DefendensImperiumRomanum] apresentaram o desenvolvimento inicial em teoria de grafos.
Além disso, [cite/t:@Cockayne2004Romandominationgraphs] apresentaram alguns resultados importantes de teoria de grafos sobre o problema, como limitantes e propriedades da função de dominação romana, os quais foram estendidos e aprimorados por [cite/t:@Xing2006noteRomandomination], [cite/t:@Favaron2009Romandominationnumber], [cite/t:@Mobaraky2008BoundsRomanDomination].
Algumas classes especiais de grafos podem ser resolvidas em tempo linear, mas, no caso geral, o problema é NP-difícil ([cite:@Dreyer2000Applicationsvariationsdomination;@Klobucar2014SomeresultsRoman;@Shang2007RomanDominationProblem]).

[cite/t:@Ivanovic2016Improvedmixedinteger] utilizaram a meta-heurística /Variable Neightborhood Search/ (VNS), obtendo resultados interessantes para as instâncias propostas por [cite/t:@Curro2014RomanDominationProblem] para o mesmo problema.
Essa meta-heurística parte da ideia de que soluções ótimas são encontradas "próximas" de boas soluções. Assim, é possível utilizar busca local e eventuais técnicas de perturbação para escapar de mínimos locais.

Já [cite/t:@Khandelwal2021RomanDominationGraphs] utilizaram algoritmos genéticos no problema de dominação romana, uma ideia que toma de inspiração da evolução das espécies observadas na natureza.
Partindo de um conjunto de soluções, realizamos "cruzamentos" das melhores para produzir novas gerações.
A cada uma, induzimos "mutações" aleatórias que alteram certos pontos das soluções, espelhando a realidade e tentando evitar cair em mínimos locais.

* Metodologia
# PROF e pli?

*Programação Linear* é uma técnica de otimização de problemas a partir da modelagem dos mesmos em *programas lineares*.
Nestes, definimos uma função objetivo, a qual queremos maximizar ou minimizar com suas variáveis sujeitas a um conjunto de restrições lineares (equações ou inequações lineares) [cite:@Chvatal1983LinearProgramming] . Um programa linear pode ser escrito da seguinte forma:
\begin{alignat*}{4}
& \omit\rlap{minize \quad \quad $\displaystyle cx$} \\
& \mbox{sujeito a}&& \quad & Ax & \geq b  & \quad &  \\
&                 &&       & x               & \in \mathbb{R}_+ &      &
\end{alignat*}

Para encontrar soluções viáveis com valores ótimos, conhecemos o algoritmo *simplex* que, apesar de ter complexidade exponencial, no caso médio executa em tempo polinomial.

Para alguns problemas, como o de dominação romana, não faz sentido falar em soluções fracionárias, afinal, não conseguimos designar meia legião a uma cidade.
Para isso, restringimos as variáveis aos inteiros, fazendo assim um *Programa Linear Inteiro*. Caso apenas um subconjunto das variáveis possuam a restrição de integralidade, chamamos esse programa de linear misto.


# citar a ideia do "ferramental moderno de PLI"

O que a princípio pode parecer uma pequena alteração, torna o problema computacionalmente ainda mais complexo. Para encontramos boas soluções viáveis para esse tipo de programa, algoritmos como o simplex não são o suficiente. Para isso, utilizamos técnicas como *branch-and-bound*, que consiste em dividir o problema em subproblemas menores e, durante o processo, encontrar limitantes que permitam diminuir o espaço de busca.

# Um pequeno exemplinho

Variações como *branch-and-cut*, na qual, ao atingir soluções não inteiras na relaxação linear usando o simplex, utilizamos algoritmos de plano de cortes para adicionar mais restrições até a solução fornecida pelo simplex na RL for inteira.
Já para *branch-and-price*, essa técnica advém da observação que, para grandes problemas, grande parte das variáveis permanecem nulas entre as interações do /branch-and-bound/.
Assim podemos inseri-las conforme progredimos na nossa busca utilizando técnicas de geração de colunas.

[cite/t:@Ivanovic2016Improvedmixedinteger] propôs duas formulações, como a descrita a baixo, para o problema de dominação romana.
Nesta, para cada vértice $i$, existem duas variáveis associadas: $x_i$ real não-negativa e $y_i$ binária. Se $x_i < 1$ e $y_i = 0$, então $f(i) = 0$; se $x_i \geq 1$, então $f(i) = 1$; se $y_i = 1$, então $f(i) = 2$.

\begin{alignat*}{4}
& \omit\rlap{minimize  $\displaystyle \sum_{i \in V} x_i+2\sum_{i \in V} y_i$} \\
& \mbox{sujeito a}&& \quad & x_i+y_i+\sum_{j \in N_i} y_j & \geq 1  & \quad & i \in V \\
&                 &&       & x_i               & \in \mathbb{R}_+ &      & i \in V \\
&                 &&       & y_i               & \in \{0,1\}      &      & i \in V
\end{alignat*}

Perceba que soluções onde $x_i > 1$ e $y_i = 1$ são viáveis, mas [cite/t:@Ivanovic2016Improvedmixedinteger] mostra que elas não serão ótimas.

* Objetivos
# Dizer claramente qual o objetivo da pesquisa: propor novos modelos de pli para domi romana e suas vairantes explorando técnicas como branch-cut branch-price e ferramental moderno de PLI.

Neste projeto, objetivamos propor novos modelos de PLI para dominação romana e suas variantes explorando técnicas como *branch-and-cut* e *branch-and-price*.
Além disso, estudaremos a possibilidade de novos cortes e limitantes para as formulações.

Os algoritmos e modelos propostos serão comparados com as instâncias presentes na literatura, como em [cite/t:@Curro2014RomanDominationProblem] e, se necessário novas instâncias poderão ser geradas.

Os resultados dos experimentos computacionais serão comparados utilizando técnicas como *Performance Profile* demonstrado por [cite/t:@Dolan2002Benchmarkingoptimizationsoftware].

#+PRINT_BIBLIOGRAPHY:
