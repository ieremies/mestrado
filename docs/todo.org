#+Title: Tarefas do mestrado
#+CATEGORY: mest

* TODO O repositório do rafael de informações
- minha estrutura de projeto
- referências / organização

* TODO 3-clique cuts
# Cortes do Renan
Dados três vértices $i, j, k$,
\[ \sum \limits_{p \in \{s \in S : |s \cap \{i,h, k\}| \geq 2\}}  x_p \leq 1.\]
A ideia é que, num triângulo, $1/3$ de cor para cada um de três cores diferentes é válido na relaxação, mas esse corte aperta para que apenas $1/2$ seja possível.

Então, dado três vertices i, j e k , eu computo se isso induz um corte violado C na solução da relaxaçao atual S. O independent set P aparece no corte se pelo menos dois dos três vertices aparecer em P. E isso será um corte violado se a soma dos valores de todas das variáveis de S que aparecem em C for maior que 1.

Daí na hora do pricing, seja C* um corte com valor dual diferente de 0.
Toda vez que você enumerar um independent set que tem pelo menos dois vertices de C*, tu precisa incluir o valor dual de C* no custo reduzido do independent set (editado)
Daí sei lá, eu enumero todos os cortes e se tiver mais que 20 cortes violados, eu coloco só os 20 mais violados.
E tem a questão da afinidade, que um corte só pode estar violado se d_ij + d_jk + d_ki > 1
Onde d_ij é a afinidade dos vertices i e j, ou seja, isso é a soma dos valores das variáveis de S em que i e j aparecem juntos.
Isso economiza processamento, porque é mais barato discartar um candidato a corte assim, do que iterando sobre todos os padrões dos três vertices para computar os coeficientes (isso obviamente considerando que você fará um preprocessamento dessa matriz de afinidade) (editado)

* TODO Olhar a bibliografia de WMSS
- Quero suporte a cortes
- Múltiplos conjuntos

O gurobi tem uma função para pegar mais soluções do que só a ótima.
[[https://www.sciencedirect.com/science/article/pii/S0890540117300950?via%3Dihub][Exact algorithms for maximum independent set - ScienceDirect]]
Eu testei um pouco isso, mas não parece mudar grandes coisas.
Existem dois parâmetros: um que indica quantas soluções buscar e outro de como buscar (até encontrar o máximo, as que encontrar no caminho ou encontrar boas ao redor do ótimo).
# TODO Fazer um experimento para confirmar isso.

A página da wikipedia refere-se a [[id:fdd40e02-78fe-4d33-8636-cf0d4975c3ba][decomposições modulares]].

Conjuntos estáveis maximais de peso maior que 1.
A quantidade de conjuntos independentes que um vértice pertence é inversamente proporcional a quantidade de vizinhos.

Algo que fica batendo na minha cabeça é "quais são os conjuntos que eu preciso colocar?". Sabemos que precisamos "conduzir" o PL a um estado onde nenhum conjunto independentes viola, mas isso não significa que precisamos colocar todos.
Por exemplo, se todos os conjuntos maximais estão presentes, sabemos que nenhum outro pode estar violado (já que todos eles são a eliminação de algum subconjunto de vértices e os pesos dos vértices são não negativos).

Quando resolvemos o dual, temos um conjunto de pesos para os vértices tais que aqueles conjuntos independentes não são violados (pesos menores que 1).
Um vértice com poucos vizinhos aparece em mais conjuntos independentes.
Um vértice com peso alto tem mais chance de violar a restrição.
Conjuntos independentes grandes (em tamanho) são compostos por vértices com poucos vizinhos.
O vértice que possui uma alta proporção peso/vizinho, muito provavelmente está num conjunto que viola.
Posso deixar essa restrição mais forte se levar em conta o peso dos vizinhos:
Para cada vértice, o "peso induzido" é o peso dele menos o peso dos vizinhos.
# Eu acho que essa última é bem mais forte que o anterior e é o que o held2012 usa

- https://en.wikipedia.org/wiki/Independent_set_(graph_theory)
[cite/title:@Tarjan1985Decompositioncliqueseparators] :: utiliza cliques para decompor o grafo em componentes conexas.
[cite/title:@Correa2018Generalcutgenerating] :: cortes para o politopo de conjunto independente.
MWSS parece ser "simples" quando o grafo é claw-free.
https://sop.ior.kit.edu/downloads/diplomaThesis.pdf :: Maximum Stable Set Problem: A Branch & Cut Solver
[[https://en.wikipedia.org/wiki/Bron%E2%80%93Kerbosch_algorithm][Bron–Kerbosch algorithm]] :: find all maximal cliques, exatamente o que foi utilizado pelo [cite:@Held2012Maximumweightstable].
[cite/title:@Lawler1980GeneratingAllMaximal] :: !
[cite/title:@Busygin2002HeuristicMaximumIndependent] aparenta ser a melhor técnica heurística...
[cite/title:@Xiao2021EfficientReductionsFast]
[cite:@Akiba2016Branchreduceexponential/FPT]
[cite/title:@Rebennack2012tutorialbranchcut] Conferir o que este fala sobre branch-and-cut para MWSS
[cite:@Grossmann2022FindingOptimalWeight] Apesar desse texto falar sobre grafos largos, ele comenta sobre algoritmos de branch and bound bons
#+begin_quote
traditional branch-and-bound methods [20, 26, 32, 44, 45, 53]
may often solve small graphs with hundreds to thousands of ver-
#+end_quote
Em especial [cite:@Gellner2021BoostingDataReduction].

* TODO Oficina do LOCo
Preciso conferir qual paper irei apresentar.
Há uma lista que a Carol me passou.

* TODO EQM

* TODO Script
- [ ] Validar a solução
- [ ] Comparar com outros resultados
  - [ ] Compilar os resultados da literatura

* TODO Separação por clique
Eu posso achar um separador por clique, coloro cada um dos lados e eu sei que eu posso juntar.

* TODO Procurar por maximum weighted clique
https://www.scopus.com/results/results.uri?sort=cp-f&src=s&sid=49c900bd2d61d3d918198954e6750619&sot=a&sdt=a&sl=97&s=TITLE-ABS-KEY%28maximum+AND+%28weighted+OR+weight%29+AND+clique%29+AND+NOT+%28TITLE-ABS-KEY%28approximation%29%29&origin=searchadvanced&editSaveSearch=&txGid=6627f505a5159fa07bb62a60785baf53&sessionSearchId=49c900bd2d61d3d918198954e6750619&limit=10
